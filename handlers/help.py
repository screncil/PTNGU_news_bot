from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext


from keyboards.QuestionKB import QuestionKB
from keyboards.MainMenuKB import MainMenuKB

from states import Question, Answer
import random

from vspDB import Questions, Admin

from bot import bot

router = Router()

question_db = Questions()
admin_db = Admin()

@router.message(StateFilter(None), F.text == "‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è")
async def help(msg: Message, state: FSMContext):
    if not question_db.checkUser(msg.from_user.id):
        await msg.answer(
            "‚úèÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å —É —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ —è–∫–µ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
        )
        await state.set_state(Question.text)
    else:
        await msg.answer("ü§¶‚Äç‚ôÄÔ∏è –í–∏ –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è")


@router.callback_query(lambda call: call.data.startswith("dislinequestion"))
async def dislineQuestion(call: CallbackQuery):
    question_id = call.data.split("_")[-1]
    question = question_db.getQuestion(question_id)
    await call.message.edit_text(
        inline_message_id=str(call.message.message_id),
        text="‚úÖ –ó–∞–ø–∏—Ç–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ",
        reply_markup=None
    )
    await bot.send_message(
        chat_id=question[0][2],
        text=f"‚ùå <b>–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è</b> '<i>{question[0][4]}</i>' <b>–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ</b>",
        reply_markup=MainMenuKB(),
        parse_mode=ParseMode.HTML
    )

    question_db.deleteQuestion(question_id)


@router.message(Question.text, F.text)
async def set_question(msg: Message, state: FSMContext):
    quest_id = random.randint(1, 100000)
    await state.update_data(text=msg.text)
    data = await state.get_data()
    question_db.addQuestion(question_id=quest_id, questioner_id=msg.from_user.id, text=data['text'], username=msg.from_user.first_name)
    await msg.answer("‚úÖ –í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é")
    for admin in admin_db.getAllAdminIds():
        await bot.send_message(
            chat_id=admin,
            text=f"üîî <b>–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <a href='tg://user?id={msg.from_user.id}'>{msg.from_user.first_name}</a></b>\n\n<i>{data['text']}</i>",
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
            reply_markup=QuestionKB(question_id=quest_id).as_markup()
        )

    await state.clear()


@router.callback_query(lambda call: call.data.startswith("acceptquestion"))
async def acceptQuestion(call: CallbackQuery, state: FSMContext) -> None:
    question_id = call.data.split("_")[-1]
    if not question_db.getStatus(question_id):
        question_db.updateStatus(question_id)
        question = question_db.getQuestion(question_id)
        await call.message.edit_text(
            f"üîî <b>–ó–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <a href='tg://user?id={question[0][2]}'>{question[0][5]}</a></b>\n\n<i>{question[0][4]}</i>\n\n–ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –∞ –ø–æ—Ç—ñ–º –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ üëá",
            inline_message_id=str(call.message.message_id),
            parse_mode=ParseMode.HTML,
            reply_markup=None
        )
        await state.update_data(question_id=question_id, questioner_id=question[0][2], question_text=question[0][4])
        await state.set_state(Answer.text)
    else:
        await call.answer("–ù–∞ —Ü–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —ñ–Ω—à–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä ü§∑")


@router.message(Answer.text, F.text)
async def answer(msg: Message, state: FSMContext):
    data = await state.get_data()
    await bot.send_message(
        chat_id=data['questioner_id'],
        text=f"üîî <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è</b> '{data['question_text']}'\n\n<i>{msg.text}</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=MainMenuKB()
    )

    question_db.deleteQuestion(data['question_id'])
    await state.clear()

    await msg.answer("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞", reply_markup=MainMenuKB())




